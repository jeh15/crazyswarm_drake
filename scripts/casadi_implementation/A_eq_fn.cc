/* This file was automatically generated by CasADi.
   The CasADi copyright holders make no ownership claim of its contents. */
/* How to prefix internal symbols */
#ifdef CASADI_CODEGEN_PREFIX
  #define CASADI_NAMESPACE_CONCAT(NS, ID) _CASADI_NAMESPACE_CONCAT(NS, ID)
  #define _CASADI_NAMESPACE_CONCAT(NS, ID) NS ## ID
  #define CASADI_PREFIX(ID) CASADI_NAMESPACE_CONCAT(CODEGEN_PREFIX, ID)
#else
  #define CASADI_PREFIX(ID) A_eq_fn_ ## ID
#endif

#include <math.h>

#ifndef casadi_real
#define casadi_real double
#endif

#ifndef casadi_int
#define casadi_int long long int
#endif

/* Add prefix to internal symbols */
#define casadi_f0 CASADI_PREFIX(f0)
#define casadi_s0 CASADI_PREFIX(s0)
#define casadi_s1 CASADI_PREFIX(s1)

/* Symbol visibility in DLLs */
#ifndef CASADI_SYMBOL_EXPORT
  #if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
    #if defined(STATIC_LINKED)
      #define CASADI_SYMBOL_EXPORT
    #else
      #define CASADI_SYMBOL_EXPORT __declspec(dllexport)
    #endif
  #elif defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
    #define CASADI_SYMBOL_EXPORT __attribute__ ((visibility ("default")))
  #else
    #define CASADI_SYMBOL_EXPORT
  #endif
#endif

static const casadi_int casadi_s0[10] = {6, 1, 0, 6, 0, 1, 2, 3, 4, 5};
static const casadi_int casadi_s1[375] = {86, 126, 0, 2, 4, 7, 10, 12, 14, 16, 18, 21, 24, 25, 26, 28, 30, 33, 36, 37, 38, 40, 42, 45, 48, 49, 50, 52, 54, 57, 60, 61, 62, 64, 66, 69, 72, 73, 74, 76, 78, 81, 84, 85, 86, 88, 90, 93, 96, 97, 98, 100, 102, 105, 108, 109, 110, 112, 114, 117, 120, 121, 122, 124, 126, 129, 132, 133, 134, 136, 138, 141, 144, 145, 146, 148, 150, 153, 156, 157, 158, 160, 162, 165, 168, 169, 170, 172, 174, 177, 180, 181, 182, 184, 186, 189, 192, 193, 194, 196, 198, 201, 204, 205, 206, 208, 210, 213, 216, 217, 218, 220, 222, 225, 228, 229, 230, 232, 234, 237, 240, 241, 242, 243, 244, 245, 246, 246, 246, 0, 6, 1, 26, 2, 6, 46, 3, 26, 66, 4, 46, 5, 66, 6, 7, 26, 27, 7, 46, 47, 27, 66, 67, 47, 67, 7, 8, 27, 28, 8, 47, 48, 28, 67, 68, 48, 68, 8, 9, 28, 29, 9, 48, 49, 29, 68, 69, 49, 69, 9, 10, 29, 30, 10, 49, 50, 30, 69, 70, 50, 70, 10, 11, 30, 31, 11, 50, 51, 31, 70, 71, 51, 71, 11, 12, 31, 32, 12, 51, 52, 32, 71, 72, 52, 72, 12, 13, 32, 33, 13, 52, 53, 33, 72, 73, 53, 73, 13, 14, 33, 34, 14, 53, 54, 34, 73, 74, 54, 74, 14, 15, 34, 35, 15, 54, 55, 35, 74, 75, 55, 75, 15, 16, 35, 36, 16, 55, 56, 36, 75, 76, 56, 76, 16, 17, 36, 37, 17, 56, 57, 37, 76, 77, 57, 77, 17, 18, 37, 38, 18, 57, 58, 38, 77, 78, 58, 78, 18, 19, 38, 39, 19, 58, 59, 39, 78, 79, 59, 79, 19, 20, 39, 40, 20, 59, 60, 40, 79, 80, 60, 80, 20, 21, 40, 41, 21, 60, 61, 41, 80, 81, 61, 81, 21, 22, 41, 42, 22, 61, 62, 42, 81, 82, 62, 82, 22, 23, 42, 43, 23, 62, 63, 43, 82, 83, 63, 83, 23, 24, 43, 44, 24, 63, 64, 44, 83, 84, 64, 84, 24, 25, 44, 45, 25, 64, 65, 45, 84, 85, 65, 85, 25, 45, 65, 85};

/* A_eq_fn:(i0[6])->(o0[86x126,246nz]) */
static int casadi_f0(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem) {
  casadi_real a0, a1, a2, a3;
  a0=1.;
  if (res[0]!=0) res[0][0]=a0;
  a1=-1.;
  if (res[0]!=0) res[0][1]=a1;
  if (res[0]!=0) res[0][2]=a0;
  if (res[0]!=0) res[0][3]=a1;
  if (res[0]!=0) res[0][4]=a0;
  a2=-5.0000000000000003e-02;
  if (res[0]!=0) res[0][5]=a2;
  a3=-9.9950000000000006e-01;
  if (res[0]!=0) res[0][6]=a3;
  if (res[0]!=0) res[0][7]=a0;
  if (res[0]!=0) res[0][8]=a2;
  if (res[0]!=0) res[0][9]=a3;
  if (res[0]!=0) res[0][10]=a0;
  if (res[0]!=0) res[0][11]=a2;
  if (res[0]!=0) res[0][12]=a0;
  if (res[0]!=0) res[0][13]=a2;
  if (res[0]!=0) res[0][14]=a0;
  if (res[0]!=0) res[0][15]=a1;
  if (res[0]!=0) res[0][16]=a0;
  if (res[0]!=0) res[0][17]=a1;
  if (res[0]!=0) res[0][18]=a2;
  if (res[0]!=0) res[0][19]=a0;
  if (res[0]!=0) res[0][20]=a3;
  if (res[0]!=0) res[0][21]=a2;
  if (res[0]!=0) res[0][22]=a0;
  if (res[0]!=0) res[0][23]=a3;
  if (res[0]!=0) res[0][24]=a2;
  if (res[0]!=0) res[0][25]=a2;
  if (res[0]!=0) res[0][26]=a0;
  if (res[0]!=0) res[0][27]=a1;
  if (res[0]!=0) res[0][28]=a0;
  if (res[0]!=0) res[0][29]=a1;
  if (res[0]!=0) res[0][30]=a2;
  if (res[0]!=0) res[0][31]=a0;
  if (res[0]!=0) res[0][32]=a3;
  if (res[0]!=0) res[0][33]=a2;
  if (res[0]!=0) res[0][34]=a0;
  if (res[0]!=0) res[0][35]=a3;
  if (res[0]!=0) res[0][36]=a2;
  if (res[0]!=0) res[0][37]=a2;
  if (res[0]!=0) res[0][38]=a0;
  if (res[0]!=0) res[0][39]=a1;
  if (res[0]!=0) res[0][40]=a0;
  if (res[0]!=0) res[0][41]=a1;
  if (res[0]!=0) res[0][42]=a2;
  if (res[0]!=0) res[0][43]=a0;
  if (res[0]!=0) res[0][44]=a3;
  if (res[0]!=0) res[0][45]=a2;
  if (res[0]!=0) res[0][46]=a0;
  if (res[0]!=0) res[0][47]=a3;
  if (res[0]!=0) res[0][48]=a2;
  if (res[0]!=0) res[0][49]=a2;
  if (res[0]!=0) res[0][50]=a0;
  if (res[0]!=0) res[0][51]=a1;
  if (res[0]!=0) res[0][52]=a0;
  if (res[0]!=0) res[0][53]=a1;
  if (res[0]!=0) res[0][54]=a2;
  if (res[0]!=0) res[0][55]=a0;
  if (res[0]!=0) res[0][56]=a3;
  if (res[0]!=0) res[0][57]=a2;
  if (res[0]!=0) res[0][58]=a0;
  if (res[0]!=0) res[0][59]=a3;
  if (res[0]!=0) res[0][60]=a2;
  if (res[0]!=0) res[0][61]=a2;
  if (res[0]!=0) res[0][62]=a0;
  if (res[0]!=0) res[0][63]=a1;
  if (res[0]!=0) res[0][64]=a0;
  if (res[0]!=0) res[0][65]=a1;
  if (res[0]!=0) res[0][66]=a2;
  if (res[0]!=0) res[0][67]=a0;
  if (res[0]!=0) res[0][68]=a3;
  if (res[0]!=0) res[0][69]=a2;
  if (res[0]!=0) res[0][70]=a0;
  if (res[0]!=0) res[0][71]=a3;
  if (res[0]!=0) res[0][72]=a2;
  if (res[0]!=0) res[0][73]=a2;
  if (res[0]!=0) res[0][74]=a0;
  if (res[0]!=0) res[0][75]=a1;
  if (res[0]!=0) res[0][76]=a0;
  if (res[0]!=0) res[0][77]=a1;
  if (res[0]!=0) res[0][78]=a2;
  if (res[0]!=0) res[0][79]=a0;
  if (res[0]!=0) res[0][80]=a3;
  if (res[0]!=0) res[0][81]=a2;
  if (res[0]!=0) res[0][82]=a0;
  if (res[0]!=0) res[0][83]=a3;
  if (res[0]!=0) res[0][84]=a2;
  if (res[0]!=0) res[0][85]=a2;
  if (res[0]!=0) res[0][86]=a0;
  if (res[0]!=0) res[0][87]=a1;
  if (res[0]!=0) res[0][88]=a0;
  if (res[0]!=0) res[0][89]=a1;
  if (res[0]!=0) res[0][90]=a2;
  if (res[0]!=0) res[0][91]=a0;
  if (res[0]!=0) res[0][92]=a3;
  if (res[0]!=0) res[0][93]=a2;
  if (res[0]!=0) res[0][94]=a0;
  if (res[0]!=0) res[0][95]=a3;
  if (res[0]!=0) res[0][96]=a2;
  if (res[0]!=0) res[0][97]=a2;
  if (res[0]!=0) res[0][98]=a0;
  if (res[0]!=0) res[0][99]=a1;
  if (res[0]!=0) res[0][100]=a0;
  if (res[0]!=0) res[0][101]=a1;
  if (res[0]!=0) res[0][102]=a2;
  if (res[0]!=0) res[0][103]=a0;
  if (res[0]!=0) res[0][104]=a3;
  if (res[0]!=0) res[0][105]=a2;
  if (res[0]!=0) res[0][106]=a0;
  if (res[0]!=0) res[0][107]=a3;
  if (res[0]!=0) res[0][108]=a2;
  if (res[0]!=0) res[0][109]=a2;
  if (res[0]!=0) res[0][110]=a0;
  if (res[0]!=0) res[0][111]=a1;
  if (res[0]!=0) res[0][112]=a0;
  if (res[0]!=0) res[0][113]=a1;
  if (res[0]!=0) res[0][114]=a2;
  if (res[0]!=0) res[0][115]=a0;
  if (res[0]!=0) res[0][116]=a3;
  if (res[0]!=0) res[0][117]=a2;
  if (res[0]!=0) res[0][118]=a0;
  if (res[0]!=0) res[0][119]=a3;
  if (res[0]!=0) res[0][120]=a2;
  if (res[0]!=0) res[0][121]=a2;
  if (res[0]!=0) res[0][122]=a0;
  if (res[0]!=0) res[0][123]=a1;
  if (res[0]!=0) res[0][124]=a0;
  if (res[0]!=0) res[0][125]=a1;
  if (res[0]!=0) res[0][126]=a2;
  if (res[0]!=0) res[0][127]=a0;
  if (res[0]!=0) res[0][128]=a3;
  if (res[0]!=0) res[0][129]=a2;
  if (res[0]!=0) res[0][130]=a0;
  if (res[0]!=0) res[0][131]=a3;
  if (res[0]!=0) res[0][132]=a2;
  if (res[0]!=0) res[0][133]=a2;
  if (res[0]!=0) res[0][134]=a0;
  if (res[0]!=0) res[0][135]=a1;
  if (res[0]!=0) res[0][136]=a0;
  if (res[0]!=0) res[0][137]=a1;
  if (res[0]!=0) res[0][138]=a2;
  if (res[0]!=0) res[0][139]=a0;
  if (res[0]!=0) res[0][140]=a3;
  if (res[0]!=0) res[0][141]=a2;
  if (res[0]!=0) res[0][142]=a0;
  if (res[0]!=0) res[0][143]=a3;
  if (res[0]!=0) res[0][144]=a2;
  if (res[0]!=0) res[0][145]=a2;
  if (res[0]!=0) res[0][146]=a0;
  if (res[0]!=0) res[0][147]=a1;
  if (res[0]!=0) res[0][148]=a0;
  if (res[0]!=0) res[0][149]=a1;
  if (res[0]!=0) res[0][150]=a2;
  if (res[0]!=0) res[0][151]=a0;
  if (res[0]!=0) res[0][152]=a3;
  if (res[0]!=0) res[0][153]=a2;
  if (res[0]!=0) res[0][154]=a0;
  if (res[0]!=0) res[0][155]=a3;
  if (res[0]!=0) res[0][156]=a2;
  if (res[0]!=0) res[0][157]=a2;
  if (res[0]!=0) res[0][158]=a0;
  if (res[0]!=0) res[0][159]=a1;
  if (res[0]!=0) res[0][160]=a0;
  if (res[0]!=0) res[0][161]=a1;
  if (res[0]!=0) res[0][162]=a2;
  if (res[0]!=0) res[0][163]=a0;
  if (res[0]!=0) res[0][164]=a3;
  if (res[0]!=0) res[0][165]=a2;
  if (res[0]!=0) res[0][166]=a0;
  if (res[0]!=0) res[0][167]=a3;
  if (res[0]!=0) res[0][168]=a2;
  if (res[0]!=0) res[0][169]=a2;
  if (res[0]!=0) res[0][170]=a0;
  if (res[0]!=0) res[0][171]=a1;
  if (res[0]!=0) res[0][172]=a0;
  if (res[0]!=0) res[0][173]=a1;
  if (res[0]!=0) res[0][174]=a2;
  if (res[0]!=0) res[0][175]=a0;
  if (res[0]!=0) res[0][176]=a3;
  if (res[0]!=0) res[0][177]=a2;
  if (res[0]!=0) res[0][178]=a0;
  if (res[0]!=0) res[0][179]=a3;
  if (res[0]!=0) res[0][180]=a2;
  if (res[0]!=0) res[0][181]=a2;
  if (res[0]!=0) res[0][182]=a0;
  if (res[0]!=0) res[0][183]=a1;
  if (res[0]!=0) res[0][184]=a0;
  if (res[0]!=0) res[0][185]=a1;
  if (res[0]!=0) res[0][186]=a2;
  if (res[0]!=0) res[0][187]=a0;
  if (res[0]!=0) res[0][188]=a3;
  if (res[0]!=0) res[0][189]=a2;
  if (res[0]!=0) res[0][190]=a0;
  if (res[0]!=0) res[0][191]=a3;
  if (res[0]!=0) res[0][192]=a2;
  if (res[0]!=0) res[0][193]=a2;
  if (res[0]!=0) res[0][194]=a0;
  if (res[0]!=0) res[0][195]=a1;
  if (res[0]!=0) res[0][196]=a0;
  if (res[0]!=0) res[0][197]=a1;
  if (res[0]!=0) res[0][198]=a2;
  if (res[0]!=0) res[0][199]=a0;
  if (res[0]!=0) res[0][200]=a3;
  if (res[0]!=0) res[0][201]=a2;
  if (res[0]!=0) res[0][202]=a0;
  if (res[0]!=0) res[0][203]=a3;
  if (res[0]!=0) res[0][204]=a2;
  if (res[0]!=0) res[0][205]=a2;
  if (res[0]!=0) res[0][206]=a0;
  if (res[0]!=0) res[0][207]=a1;
  if (res[0]!=0) res[0][208]=a0;
  if (res[0]!=0) res[0][209]=a1;
  if (res[0]!=0) res[0][210]=a2;
  if (res[0]!=0) res[0][211]=a0;
  if (res[0]!=0) res[0][212]=a3;
  if (res[0]!=0) res[0][213]=a2;
  if (res[0]!=0) res[0][214]=a0;
  if (res[0]!=0) res[0][215]=a3;
  if (res[0]!=0) res[0][216]=a2;
  if (res[0]!=0) res[0][217]=a2;
  if (res[0]!=0) res[0][218]=a0;
  if (res[0]!=0) res[0][219]=a1;
  if (res[0]!=0) res[0][220]=a0;
  if (res[0]!=0) res[0][221]=a1;
  if (res[0]!=0) res[0][222]=a2;
  if (res[0]!=0) res[0][223]=a0;
  if (res[0]!=0) res[0][224]=a3;
  if (res[0]!=0) res[0][225]=a2;
  if (res[0]!=0) res[0][226]=a0;
  if (res[0]!=0) res[0][227]=a3;
  if (res[0]!=0) res[0][228]=a2;
  if (res[0]!=0) res[0][229]=a2;
  if (res[0]!=0) res[0][230]=a0;
  if (res[0]!=0) res[0][231]=a1;
  if (res[0]!=0) res[0][232]=a0;
  if (res[0]!=0) res[0][233]=a1;
  if (res[0]!=0) res[0][234]=a2;
  if (res[0]!=0) res[0][235]=a0;
  if (res[0]!=0) res[0][236]=a3;
  if (res[0]!=0) res[0][237]=a2;
  if (res[0]!=0) res[0][238]=a0;
  if (res[0]!=0) res[0][239]=a3;
  if (res[0]!=0) res[0][240]=a2;
  if (res[0]!=0) res[0][241]=a2;
  if (res[0]!=0) res[0][242]=a0;
  if (res[0]!=0) res[0][243]=a0;
  if (res[0]!=0) res[0][244]=a0;
  if (res[0]!=0) res[0][245]=a0;
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int A_eq_fn(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem){
  return casadi_f0(arg, res, iw, w, mem);
}

extern "C" CASADI_SYMBOL_EXPORT int A_eq_fn_alloc_mem(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int A_eq_fn_init_mem(int mem) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void A_eq_fn_free_mem(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT int A_eq_fn_checkout(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void A_eq_fn_release(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT void A_eq_fn_incref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT void A_eq_fn_decref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT casadi_int A_eq_fn_n_in(void) { return 1;}

extern "C" CASADI_SYMBOL_EXPORT casadi_int A_eq_fn_n_out(void) { return 1;}

extern "C" CASADI_SYMBOL_EXPORT casadi_real A_eq_fn_default_in(casadi_int i){
  switch (i) {
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* A_eq_fn_name_in(casadi_int i){
  switch (i) {
    case 0: return "i0";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* A_eq_fn_name_out(casadi_int i){
  switch (i) {
    case 0: return "o0";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* A_eq_fn_sparsity_in(casadi_int i) {
  switch (i) {
    case 0: return casadi_s0;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* A_eq_fn_sparsity_out(casadi_int i) {
  switch (i) {
    case 0: return casadi_s1;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT int A_eq_fn_work(casadi_int *sz_arg, casadi_int* sz_res, casadi_int *sz_iw, casadi_int *sz_w) {
  if (sz_arg) *sz_arg = 1;
  if (sz_res) *sz_res = 1;
  if (sz_iw) *sz_iw = 0;
  if (sz_w) *sz_w = 0;
  return 0;
}


