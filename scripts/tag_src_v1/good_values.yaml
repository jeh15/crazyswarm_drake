# Slow Chaser:
# PD Controller:
  self.saturation_limit = 0.0
  self.saturation_max_limit = 200.0
  self.ramp_time = 30.0
  self._safety_offset = 0.075
  self._error_previous = 0.0
  self._error = np.zeros((3,), dtype=float)
  self._error_derivative = np.zeros((3,), dtype=float)
  
  self._P_limt = 100.0
  self._P_init = 50.0
  self._P = 100.0
  self._D = 20.0

# Motion Planner
  self._mass = 0.027 # Actual Crazyflie Mass
  self._friction = 0.1
  self._tol = 1e-05
  self._solve_flag = 0
  self._area_limit = jnp.array([config.area_bounds, config.area_bounds], dtype=float)

  # State Size for Optimization: (Seems specific to this implementation should not be a config param)
  self._state_size = self._state_dimension * 2
  self._full_size = self._state_dimension * 3
  self._num_state_slack = 2
  self._num_risk_slack = 1
  self._num_slack = self._num_state_slack + self._num_risk_slack
  # Size of design variable vector:
  self._setpoint = jnp.zeros(
      ((self._full_size + self._num_slack) * self._nodes,),
      dtype=float,
  )

  self._state_bounds = jnp.asarray(
      [2.0, 2.0, 0.1],
      dtype=float,
  )

  self._weights = jnp.asarray(
      [100.0, 1.0, 0.0, 1.0],
      dtype=float,
  )

# Config:
  # Control Rates:
  config.motion_planner_rate = 1.0 / 30.0
  config.crazyswarm_rate = 1.0 / 100.0
  config.adversary_rate = 1.0 / 100.0
  # Model Parameters:
  config.nodes = 51   
  config.state_dimension = 2       
  config.time_horizon = 2.0
  config.dt = config.time_horizon / (config.nodes - 1.0)
  config.area_bounds = 0.75
  # Spline Parameters:
  config.spline_resolution = 7
  config.bin_resolution = 100
  config.failure_radius = 0.25

# Fast Chaser:
# PD Controller:
  self.saturation_limit = 0.0
  self.saturation_max_limit = 200.0
  self.ramp_time = 15.0
  self._safety_offset = 0.075
  self._error_previous = 0.0
  self._error = np.zeros((3,), dtype=float)
  self._error_derivative = np.zeros((3,), dtype=float)
  
  self._P_limt = 200.0
  self._P_init = 50.0
  self._P = 100.0
  self._D = 20.0

 # Constants 
  self._mass = 0.027 # Actual Crazyflie Mass
  self._friction = 0.1 #0.01
  self._tol = 1e-05
  self._solve_flag = 0
  self._area_limit = jnp.array([config.area_bounds, config.area_bounds], dtype=float)

  # State Size for Optimization: (Seems specific to this implementation should not be a config param)
  self._state_size = self._state_dimension * 2
  self._full_size = self._state_dimension * 3
  self._num_state_slack = 2
  self._num_risk_slack = 1
  self._num_slack = self._num_state_slack + self._num_risk_slack
  # Size of design variable vector:
  self._setpoint = jnp.zeros(
      ((self._full_size + self._num_slack) * self._nodes,),
      dtype=float,
  )

  self._state_bounds = jnp.asarray(
      [2.0, 2.0, 0.1],
      dtype=float,
  )

  self._weights = jnp.asarray(
      [100.0, 1.0, 0.0, 1.0],
      dtype=float,
  )

# Control Rates:
  config.motion_planner_rate = 1.0 / 30.0
  config.crazyswarm_rate = 1.0 / 100.0
  config.adversary_rate = 1.0 / 100.0
  # Model Parameters:
  config.nodes = 51  
  config.state_dimension = 2       
  config.time_horizon = 3.0
  config.dt = config.time_horizon / (config.nodes - 1.0)
  config.area_bounds = 0.75
  # Spline Parameters:
  config.spline_resolution = 7
  config.bin_resolution = 100
  config.failure_radius = 0.4